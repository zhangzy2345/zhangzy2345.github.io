<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | zhangzy's Blog]]></title>
  <link href="http://zhangzy2345.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://zhangzy2345.github.io/"/>
  <updated>2014-05-11T00:44:48+08:00</updated>
  <id>http://zhangzy2345.github.io/</id>
  <author>
    <name><![CDATA[zhangzy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在octopress中设置语法高亮]]></title>
    <link href="http://zhangzy2345.github.io/blog/pygments-highlight-in-octopress"/>
    <updated>2014-05-11T00:02:51+08:00</updated>
    <id>http://zhangzy2345.github.io/blog/pygments-highlight-in-octopress</id>
    <content type="html"><![CDATA[<p>看下文章的发布时间，就知道本屌又折腾了好几个小时才把这高亮弄出来，为了让大家少走弯路，都没去陪女朋友睡觉，明天一顿搓衣板是少不了了，大家觉得本文要是有用，就点击下方的赞助，我这顿搓衣板也算没白跪。</p>

<p>闲话不多说，大家在写博文的时候，作为程序员肯定少不了贴代码，而装完octopress后，默认没有语法高亮的功能，让文章看上去着实不爽啊，下面就给大家介绍如何让代码高亮。</p>

<p>以下是Octopress官方的原文：</p>

<blockquote><p>Sharing code is important, and blogging about it should be easy and beautiful. That&rsquo;s why Octopress is packed with features to make blogging your code a breeze. Though Jekyll comes with support for Pygments syntax highlighting, Octopress makes it way better. Here&rsquo;s how.</p>

<p>A Sass port of Solarized syntax highlighting created specifically for Octopress.
Gist code embedding &ndash; by Brandon Tilly.
Insert code snippets from your filesystem with a download link.
Easy inline code blocks with &lt;figureand &lt;figcaptionand optional download links.
Pygments caching &ndash; a Jekyll community plugin.</p></blockquote>

<!--more-->


<p>*
译文：</p>

<p>在博客上共享代码片段应该是简单的，并且代码应该具有简单的高亮功能。Octopress也具有这种功能，在jekyll上，其使用的是pygment来实现代码高亮的功能，Octopress实现的更好。在Octopress上面有下面几种选择：</p>

<ul>
<li>使用Solarized高亮主题来实现</li>
<li>从自己的文件系统中插入代码片段，该代码具有下载链接。</li>
<li>简单的内嵌代码块带有<code>&lt;div class='bogus-wrapper'&gt;&lt;notextile&gt;&lt;figure&gt;</code>和<code>&lt;figcaption&gt;</code>和可选的下载链接。</li>
<li>Pygments caching。*</li>
</ul>


<p>这里我们选用 <code>Pygments</code> 实现语法的高亮，来到我们的 <a href="http://pygments.org/">Pygments官网</a> 在左边栏我们可以看到：</p>

<pre><code>pip install Pygments
</code></pre>

<p>所以，我们需要先安装 <code>pip</code> ，才能继续安装 <code>Pygments</code>，下面详细介绍安装的步骤：</p>

<p><strong>1、安装python</strong></p>

<p>在window下面安装python真是so easy，直接在<a href="https://www.python.org/">官网</a>下载后，全部  <code>next</code> 安装，但是注意python的版本选择非常重要，我今晚就是卡在这里了，本屌以前觉得python非常屌，而且本屌一向是只装最新版不装稳定版，在很久以前装了python 3.x的版本，导致用语法高亮后 <code>rake generate</code> 一直报错，最后把python版本换成2.7后才成功，所以到今天(<em>2014-05-10应该是11号</em>)你必须选择 <strong>python</strong> 的版本为<strong>2.7</strong>，装完之后，记得把python的目录加入到环境变量中，这里也可以预先将 <code>script</code> 目录同时加入到环境变量中，因为之后用pip时需要。</p>

<p><strong>2、安装easy_install</strong></p>

<p>装这个是为了下一步安装pip，先去下载 <a href="http://peak.telecommunity.com/dist/ez_setup.py">ez_setup.py</a> ,然后进行安装</p>

<p><code>python
py ez_setup.py install
</code></p>

<p><strong>3、安装pip</strong></p>

<p>先<a href="https://pypi.python.org/packages/source/p/pip/pip-1.4.tar.gz#md5=ca790be30004937987767eac42cfa44a">下载pip</a>，解压后，切换到pip目录，进行安装。</p>

<p><code>
cd pip
python setup.py install
easy_install pip #需要将python目录下的script加入到环境变量中
</code></p>

<p><strong>4、安装Pygments</strong></p>

<pre><code>pip install Pygments
gem install pygments.rb #安装pygments.rb，gem 在上一篇中搭建blog的时候已经安装
</code></pre>

<p><strong>5、修改_config.yml</strong>
```yml</p>

<pre><code>#pygments: false # default python pygments have been replaced by pygments.rb
pygments: true 
</code></pre>

<p>```</p>

<p>以上步骤，语法高亮的配置全部完成，这时你可以进行测试：</p>

<pre><code>```c
#include&lt;stdio.h&gt;
int main(void) {
    printf("Welcome to zhangzy's blog");
    return 0;
}
```
</code></pre>

<p>显示如下：</p>

<p>```c</p>

<h1>include&lt;stdio.h></h1>

<p>int main(void) {</p>

<pre><code>printf("Welcome to zhangzy's blog");
return 0;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在windows上搭建github博客]]></title>
    <link href="http://zhangzy2345.github.io/blog/window-github-blog"/>
    <updated>2014-05-10T01:08:28+08:00</updated>
    <id>http://zhangzy2345.github.io/blog/window-github-blog</id>
    <content type="html"><![CDATA[<p>以下是我结合一些资料与个人遇到的一些问题后的总结，让大家在搭建的过程中尽可能的少被坑。</p>

<h3>一、创建github账号</h3>

<p>首先大家需要在github上面创建一个账户，然后账号需要与创建的blog保持一致，如：创建 <a href="http://zhangzy2345.github.io/">zhangzy2345.github.io</a> 则对于的github账号为zhangzy2345，然后
<code>Create Repository</code>，填写的<strong><em>Repository Name</em></strong>为你的blog地址，如：<a href="http://zhangzy2345.github.io/">zhangzy2345.github.io</a>。</p>

<h3>二、安装Git</h3>

<p>首先下载 <a href="http://msysgit.github.io/">Git for windows</a> ，默认安装后就能使用git了。
接下来通过Git创建一个SSH KEY与之间的创建的github绑定。</p>

<p>在Git中输入：</p>

<pre><code>$ ssh-keygen -t rse -C username@email.com
</code></pre>

<p><em>Note:上面的email换成你注册github账户时填写的email，全部按默认就行了，不用设置密码了，不然以后提交的时候你会很烦，我之前就设置了，之后果断重新弄了一次</em></p>

<p>执行完成之后会在你的目录(C:/User/username)下面的.ssh目录下面有个
<code>id_sra.pub</code>文件，用记事本去打开它，然后在你的github上面 <code>Account Settings</code> &ndash;> <code>SSH Public Keys</code> &ndash;> <code>Add</code> 将复制的信息粘贴进去，此时在github上面的设置全部完成。</p>

<!--more-->


<p><em>Note：在Git中输入:</em></p>

<pre><code>$ ssh -T git@github.com
</code></pre>

<p><em>测试是否连接正常。</em></p>

<h3>三、安装ruby</h3>

<p>先去下载 <a href="http://rubyforge.org/frs/?group_id=167">RubyInstaller</a> 和 <a href="https://github.com/oneclick/rubyinstaller/downloads/">Devkit</a>。</p>

<p>在选择Ruby版本的时候，我被坑了一下，有些教程可能写的时间比较久了，让大家选择1.9.2版本，但是安装之后，在最后安装 <code>Octopress</code> 的时候出现很多错误，最后在 <code>Octopress</code> 的 <a href="https://github.com/imathis/octopress">github</a> 看见了这句话：</p>

<blockquote><p>Note: Octopress requires a minimum Ruby version of 1.9.3-p0</p></blockquote>

<p>所以，大家在安装ruby的时候，先去 <a href="https://github.com/imathis/octopress">Octopress</a> 看看需要哪个版本的ruby，现在(2014-05-10) 你选择<code>1.9.3</code> 就行了。</p>

<p>对于 <code>Devkit</code> 的安装，没有什么特别值得注意的地方<em>(我没遇到)</em>，在解压的时候不要选择中文路径就行。</p>

<p>运行程序 <code>Start Command Prompt with Ruby</code> ，切换到解压后的 <code>Devkit</code> 目录下，执行以下命令：
```</p>

<pre><code>ruby dk.rb init
ruby dk.rb install
gem install rdiscount --platform=ruby
</code></pre>

<p>```</p>

<blockquote><p>Note：上述安装基本不会出错，如果出现什么问题，请大家自己去 goole 或 baidu 查相应资料</p></blockquote>

<h3>四、安装octopress</h3>

<p><a href="http://octopress.org/">octopress</a> 目前已经是<code>2.0</code>版本，我们接下来会通过它来安装我们博客的主题，关于他的详细介绍，请自己访问他的<a href="http://octopress.org/">官网</a>。</p>

<p>切换至<code>Git Bash</code>下，在你的blog目录下，执行：</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<p>然后在你的 <code>Start Command Prompt with Ruby</code> 中，将工作目录切换至刚刚clone的 <code>octopress</code> 目录下，执行</p>

<pre><code>gem install bundler
bundle install
</code></pre>

<blockquote><p>Note：如果上面两步出现错误，请查看 ruby 版本是否与 octopress 要求的一致。</p></blockquote>

<p>接下来安装 octopress 默认的主题，如果对 <code>greyshade</code> 主题感兴趣，请看我的另一篇博文：<a href="http://zhangzy2345.github.io/">《greyshade 主题的搭建》</a></p>

<pre><code>rake install
</code></pre>

<p>接下来，用以下命令创建一篇博文：</p>

<pre><code>rake new_post['first blog']
</code></pre>

<p>此时，会在你的 <code>octopress</code> &ndash;> <code>source</code> &ndash;> <code>_posts</code> 目录下创建一个makedown文件，需要通过以下命令转换成对应的静态资源文件：</p>

<pre><code>rake generate
</code></pre>

<blockquote><p>Note：包括你修改配置、主题、样式等，都需要运行此命令</p></blockquote>

<p>此时，所有的更新都还在你本地，若你想先在本地进行预览，执行：</p>

<pre><code>rake preview
</code></pre>

<blockquote><p>Note：执行后，会提示你用浏览器打开 <a href="http://localhost">http://localhost</a> 与对应的端口就行预览</p></blockquote>

<p>最后预览没问题后，就可以发布到 <code>github</code> 上面了，首先，你需要将 github 上面的 Repository 与 octopress 连接，执行：</p>

<pre><code>rake setup_github_pages
</code></pre>

<blockquote><p>Note：特别注意，该命令是在Git Bash下面执行，不是在 Start Command Prompt with Ruby 中运行，我被坑过，几个小时没找到原因</p></blockquote>

<p>接着，按照提示你需要将你的地址输入进去，你可以直接在github上面copy，也可以在git中执行：</p>

<pre><code>$ git remote -v
</code></pre>

<p>最后执行</p>

<pre><code>rake reploy
</code></pre>

<p>该命令，会先清空 <code>_deyloy</code> 后，重新生成所有静态资源后，自动 <code>push</code> 到你git的 <code>master</code> 上面</p>

<blockquote><p>Note：值得提醒大家，如果你直接操作 github的matser分支后，必须在你的<em>deploy下面先进行pull，然后在rake reploy，否则会无他 push，本屌在这里也被坑了很久，你要注意的一点就是，</em>deploy 对应的就是你github上面master分支</p></blockquote>
]]></content>
  </entry>
  
</feed>
